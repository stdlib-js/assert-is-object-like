// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,t;e=this,t=function(e){"use strict";var t,r="function"==typeof Object.defineProperty?Object.defineProperty:null,o=Object.defineProperty,n=Object.prototype,i=n.toString,l=n.__defineGetter__,a=n.__defineSetter__,u=n.__lookupGetter__,c=n.__lookupSetter__;t=function(){try{return r({},"x",{}),!0}catch(e){return!1}}()?o:function(e,t,r){var o,f,y,p;if("object"!=typeof e||null===e||"[object Array]"===i.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof r||null===r||"[object Array]"===i.call(r))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+r+"`.");if((f="value"in r)&&(u.call(e,t)||c.call(e,t)?(o=e.__proto__,e.__proto__=n,delete e[t],e[t]=r.value,e.__proto__=o):e[t]=r.value),y="get"in r,p="set"in r,f&&(y||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return y&&l&&l.call(e,t,r.get),p&&a&&a.call(e,t,r.set),e};var f,y=t,p="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),b=Object.prototype.toString,s=Object.prototype.hasOwnProperty,_="function"==typeof Symbol?Symbol.toStringTag:"";f=p&&"symbol"==typeof Symbol.toStringTag?function(e){var t,r,o,n,i;if(null==e)return b.call(e);r=e[_],i=_,t=null!=(n=e)&&s.call(n,i);try{e[_]=void 0}catch(t){return b.call(e)}return o=b.call(e),t?e[_]=r:delete e[_],o}:function(e){return b.call(e)};var d,v=f;d=Array.isArray?Array.isArray:function(e){return"[object Array]"===v(e)};var j=d;function m(e){return null!==e&&"object"==typeof e}var g=function(e){if("function"!=typeof e)throw new TypeError("invalid argument. Must provide a function. Value: `"+e+"`.");return function(t){var r,o;if(!j(t))return!1;if(0===(r=t.length))return!1;for(o=0;o<r;o++)if(!1===e(t[o]))return!1;return!0}}(m);y(m,"isObjectLikeArray",{configurable:!1,enumerable:!1,writable:!1,value:g}),e.default=m,e.isObjectLikeArray=g,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).isObjectLike={});
//# sourceMappingURL=index.js.map
