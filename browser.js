// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,t;e=this,t=function(){"use strict";var e,t="function"==typeof Object.defineProperty?Object.defineProperty:null,r=Object.defineProperty,o=Object.prototype,n=o.toString,i=o.__defineGetter__,l=o.__defineSetter__,a=o.__lookupGetter__,u=o.__lookupSetter__;e=function(){try{return t({},"x",{}),!0}catch(e){return!1}}()?r:function(e,t,r){var c,f,y,p;if("object"!=typeof e||null===e||"[object Array]"===n.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof r||null===r||"[object Array]"===n.call(r))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+r+"`.");if((f="value"in r)&&(a.call(e,t)||u.call(e,t)?(c=e.__proto__,e.__proto__=o,delete e[t],e[t]=r.value,e.__proto__=c):e[t]=r.value),y="get"in r,p="set"in r,f&&(y||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return y&&i&&i.call(e,t,r.get),p&&l&&l.call(e,t,r.set),e};var c,f=e,y="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),p=Object.prototype.toString,b=Object.prototype.hasOwnProperty,_="function"==typeof Symbol?Symbol.toStringTag:"";c=y&&"symbol"==typeof Symbol.toStringTag?function(e){var t,r,o,n,i;if(null==e)return p.call(e);r=e[_],i=_,t=null!=(n=e)&&b.call(n,i);try{e[_]=void 0}catch(t){return p.call(e)}return o=p.call(e),t?e[_]=r:delete e[_],o}:function(e){return p.call(e)};var s,d=c;s=Array.isArray?Array.isArray:function(e){return"[object Array]"===d(e)};var v=s;function m(e){return null!==e&&"object"==typeof e}var g=function(e){if("function"!=typeof e)throw new TypeError("invalid argument. Must provide a function. Value: `"+e+"`.");return function(t){var r,o;if(!v(t))return!1;if(0===(r=t.length))return!1;for(o=0;o<r;o++)if(!1===e(t[o]))return!1;return!0}}(m);return f(m,"isObjectLikeArray",{configurable:!1,enumerable:!1,writable:!1,value:g}),m},"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).isObjectLike=t();
//# sourceMappingURL=browser.js.map
